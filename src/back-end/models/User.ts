import mongoose, { Schema, Document, Model, Types } from "mongoose";

export type UserRole = "Admin" | "User";

/**
 * TODO:
 * Define User interface
 * _id, email, password, role, isAuthenticated?
 */
export interface IUser extends Document {
  _id: Types.ObjectId;
  email: string;
  password: string;
  role: UserRole;
  isAuthenticated: boolean;
}

/**
 * TODO:
 * Design User Schema
 * 1. _id: auto generated by mongoose
 * 2. email: should satisfy the format
 * 3. password: no length limit for now
 * 4. isAuthenticated: use for verifying if user has logged in or not.
 */
const UserSchema: Schema<IUser> = new Schema({
  email: {
    type: String,
    required: true,
    unique: true,
    trim: true,
  },
  password: {
    type: String,
    required: true,
  },
  role: {
    type: String,
    enum: ["Admin", "User"],
    required: true,
  },
  isAuthenticated: {
    type: Boolean,
    default: false,
  },
});

// Export the model
const User: Model<IUser> = mongoose.model<IUser>("User", UserSchema);
export default User;
